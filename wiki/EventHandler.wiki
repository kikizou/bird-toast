#summary Skeleton for handling input events
#labels Phase-Implementation

==EventHandler==
{{{

class EventHandler
{
public:
	virtual void handleEvent(SDL_Event* event) = 0;
};

}}}

Enables event driven input (sequential typing/button clicks)


==Action Map==
Allows the definition of SDL_Event based actions from file/at runtime.
The name of an action (e.g. "Player1 Run Right") is mapped to an ActionDescriptor
which describes the SDL_Event type and the specific data associated with that event.

{{{

typedef struct
{
	Uint8 eventType, action;
} ActionDescriptor;

static std::map<const char*, ActionDescriptor> g_Actions;

}}}

*Use:* An assigned action can then be used to define behavior after keypresses etc.
For example:

{{{

/* define action */
ActionDescriptor desc = {SDL_KEYBOARD_EVENT, SDLK_UP};

g_Actions["bloop"] = desc;

...

/* Use mapped action */
void MyClass::handleEvent(SDL_Event* event)
{
	switch(event->type)
	{
	case SDL_KEYBOARD_EVENT:
		switch(event->key->keysym->sym)
		{
		case g_Actions["bloop"].action:
			/* Do something here */
			break;
		}
		break;
	}
}

}}}

The eventType field is useful for taking input from the game and turning it into an ActionDescription in order to save the settings.  We need to know what action the data is for since the SDL enums overlap.